<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>叫我大王</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 11 Apr 2017 18:19:45 +0800</pubDate>
    <lastBuildDate>Tue, 11 Apr 2017 18:19:45 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>JavaScript中的事件委托</title>
        <description>&lt;h2 id=&quot;事件委托&quot;&gt;事件委托&lt;/h2&gt;

&lt;p&gt;    事件，就是文档与浏览器窗口发生的一些特定的交互瞬间，像是点击（click）、加载（load）、鼠标进入（mouseenter）等。&lt;br /&gt;
    委托，就是这件事我不做，我让别人帮我做。当然了，委托这种事除了自己的亲爹亲妈，别人才不会管你呢，所以事件委托必须是委托给父级元素。&lt;/p&gt;

&lt;h2 id=&quot;为什么要用事件委托&quot;&gt;为什么要用事件委托&lt;/h2&gt;

&lt;p&gt;    那么各位老铁们就要问了，明明自己就能干的事，为啥要委托给别人？&lt;br /&gt;
    且听我细细道来~&lt;br /&gt;
    先看下面这段代码：&lt;/p&gt;
&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;BWXmNY&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;Conycony&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;未委托&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/Conycony/pen/BWXmNY/&quot;&gt;未委托&lt;/a&gt; by Cony (&lt;a href=&quot;http://codepen.io/Conycony&quot;&gt;@Conycony&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;    在上面的代码中，点击li标签，分别会执行不同的逻辑，分别用各自的点击事件来完成的。&lt;br /&gt;
    在JavaScript中，每一个函数都是对象，都会占用内存；内存中的对象越多，页面的性能就越差。在实际开发中，可能会有人给每个按钮都添加一个onclick事件，如果像这样不分青红皂白的向页面中添加大量的处理程序，就会影响页面的性能。&lt;br /&gt;
    那么，类似的逻辑要怎么提升页面的性能呢？对“事件处理程序过多”问题的解决方案，就是&lt;strong&gt;事件委托&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;原生js中的事件委托&quot;&gt;原生js中的事件委托&lt;/h2&gt;
&lt;p&gt;    上面的代码可以利用事件委托来进行修改：&lt;/p&gt;
&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;YZmrNz&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;Conycony&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;原生js事件委托&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/Conycony/pen/YZmrNz/&quot;&gt;原生js事件委托&lt;/a&gt; by Cony (&lt;a href=&quot;http://codepen.io/Conycony&quot;&gt;@Conycony&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;    在这段代码里，我们将事件委托给了li的父级元素ul，也就是#list，由于所有的li元素都是#list的子节点，而且它们的事件会&lt;strong&gt;冒泡&lt;/strong&gt;（肯定有人会问什么是冒泡，好的，下一篇就写事件冒泡），所以每个li元素的点击事件最终都会被#list的点击函数处理。在这个函数中，我们通过获取&lt;strong&gt;事件源e.target&lt;/strong&gt;的id，并用switch语句检测事件源id，来决定当前的点击事件要执行什么逻辑。以上就构成了原生js的事件委托。&lt;/p&gt;

&lt;h2 id=&quot;事件委托更为重要的作用&quot;&gt;事件委托更为重要的作用&lt;/h2&gt;
&lt;p&gt;    肯定有老铁发现过以下问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;js动态生成的元素绑定事件无效；&lt;/li&gt;
  &lt;li&gt;元素的class是js动态设置的，通过这个class选择器获取到这个元素后绑定事件失效。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;    遇到上面的问题，有些老铁可能就会懵了，这是为什么呢？&lt;br /&gt;
    这是因为事件绑定只对dom中存在的元素有效，对于我们后来动态增加的元素是监测不到，所以绑定不了。&lt;br /&gt;
    同样，当你使用var aa = document.getElementsByTagName(“动态生成的元素”);来获取动态生成的元素的时候也是获取不到的，因为网页只会执行一次初始化绑定，之后动态生成的dom元素也是监测不到的。&lt;br /&gt;
    针对这个问题，解决的办法有以下两种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;生成元素的同时就绑定事件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;WpVamM&quot; data-default-tab=&quot;result&quot; data-user=&quot;Conycony&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;未来元素绑定事件&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/Conycony/pen/WpVamM/&quot;&gt;未来元素绑定事件&lt;/a&gt; by Cony (&lt;a href=&quot;http://codepen.io/Conycony&quot;&gt;@Conycony&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;使用事件委托&lt;br /&gt;
jquery中使用on方法进行事件绑定时，接收的第一个参数event是事件，第二个是可选参数selector，如果添加了selector这个参数，就构成了事件委托，如下：&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'非动态父级元素'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;动态元素&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//给“动态元素”绑定事件，事件委托给非动态生成的父级元素&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;    最后再放一个例子吧，这个例子中的元素class是js动态改变的，改变后绑定事件使用了事件委托。
&lt;a href=&quot;http://codepen.io/Conycony/pen/rywOze&quot;&gt;点我，我就是例子&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://screamwitch.github.io&quot;&gt;回到拉萨&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/10/JavaScript%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/10/JavaScript%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98.html</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>A Jekyll Theme Named Book</title>
        <description>&lt;p&gt;Simple is better, but many themes are over designed. So, &lt;a href=&quot;https://github.com/kkninjae/book&quot;&gt;Book&lt;/a&gt; is built.&lt;/p&gt;

&lt;h2 id=&quot;get-started&quot;&gt;Get started&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;fork the &lt;a href=&quot;https://github.com/kkninjae/book/fork&quot;&gt;repo&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;clone &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/username/book&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve -w&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; should be ready.&lt;/p&gt;

&lt;h2 id=&quot;customize&quot;&gt;Customize&lt;/h2&gt;

&lt;h3 id=&quot;_configyml-file&quot;&gt;_config.yml file&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;title: site name&lt;/li&gt;
  &lt;li&gt;description: site description&lt;/li&gt;
  &lt;li&gt;url: site url&lt;/li&gt;
  &lt;li&gt;avatar: absolute path of avatar which is a picture (140px * 140px) on the index page.&lt;/li&gt;
  &lt;li&gt;favicon: absolute path of site favicon&lt;/li&gt;
  &lt;li&gt;google_analytics: id for google analystics&lt;/li&gt;
  &lt;li&gt;disqus_shortname: shortname of disque comment system&lt;/li&gt;
  &lt;li&gt;about: content on the about page.
you can write more than one paragraph but the format should be like the original one.
the special word &lt;code class=&quot;highlighter-rouge&quot;&gt;?link?&lt;/code&gt; will be replaced by one of the links which are listed under links.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;warning&quot;&gt;warning&lt;/h3&gt;

&lt;p&gt;Please do not delete the first two lines of style.css file.&lt;/p&gt;

&lt;h2 id=&quot;end&quot;&gt;End.&lt;/h2&gt;

&lt;p&gt;If you like it, &lt;a href=&quot;https://github.com/kkninjae/book&quot;&gt;star&lt;/a&gt; it :).&lt;/p&gt;

&lt;p&gt;If you have a problem, &lt;a href=&quot;https://github.com/kkninjae/book/issues&quot;&gt;github issue is ready&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2015/08/28/jekyll-theme-book.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/08/28/jekyll-theme-book.html</guid>
        
        <category>english</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Book Style</title>
        <description>&lt;h1 id=&quot;three-colors-for-heading-2&quot;&gt;Three Colors for Heading 2&lt;/h1&gt;

&lt;h2 id=&quot;rabbit&quot;&gt;rabbit&lt;/h2&gt;

&lt;p&gt;Audiam scripta sanctus ea has, sea ullum periculis repudiare ea. Accusata dissentiet sit id, euismod consequuntur sed in, etiam malorum vivendum no usu. Nec cu habeo equidem interpretaris, dicam quidam eu vix. Eu ius iuvaret oportere.&lt;/p&gt;

&lt;p&gt;Ea partem virtute nusquam eum, sea minim referrentur in. Vidit consectetuer nam ex. Tempor blandit theophrastus an vel, fastidii incorrupte cum cu, in sint legendos pertinacia mei. Duo eius erat affert te, ad vel diceret posidonium, ne vel praesent persecuti definitiones. Ad pro mutat decore, sit nonumy consul nostrum ei.&lt;/p&gt;

&lt;h2 id=&quot;cat&quot;&gt;cat&lt;/h2&gt;

&lt;p&gt;Te sea melius legendos, nobis prodesset cum ei. Consulatu accommodare sit ne. Duo lorem accumsan moderatius an, id has sensibus praesent patrioque. Eu usu scaevola scripserit, clita altera pri cu.&lt;/p&gt;

&lt;p&gt;Virtute constituto theophrastus ad eum, vis at stet salutandi. Te utamur sanctus perfecto usu, congue dissentiunt ei ius, cu eam probatus assentior. Cu omnis legere est, et vidit corrumpit mei, stet illum mundi mea in. Ei ius partem eligendi. Sumo utinam et sea, an ullum ludus eum, eos novum repudiare deseruisse eu.&lt;/p&gt;

&lt;h2 id=&quot;dog&quot;&gt;dog&lt;/h2&gt;

&lt;p&gt;Vis nullam dissentiet ei, mea nihil accumsan perfecto ex, agam melius et usu. Vix reque aperiri instructior cu, nec ad admodum copiosae. Nobis appetere persequeris eos cu, luptatum sapientem facilisis te nam. Mazim philosophia ut est, no insolens assueverit has, cu velit feugiat molestie eam.&lt;/p&gt;

&lt;p&gt;Cu dictas perpetua mel, volumus evertitur at vis. Quo case errem senserit in. Ex usu facer feugait evertitur, nam te veri vivendum, vim cu elit omnes menandri. Inermis interesset quaerendum sea at, vidit appetere reformidans duo ei. Cu usu perpetua principes. At etiam homero mel, usu platonem forensibus an.&lt;/p&gt;

&lt;h2 id=&quot;lion&quot;&gt;lion&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/book/assets/img/blog/dessert.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tamquam ullamcorper consequuntur vim in, clita tritani consulatu te duo. Vel ut ignota petentium contentiones. Sea in assum tantas ubique, ne sit amet eripuit bonorum. At vis fabellas maiestatis, ea nihil ridens nec, utroque appareat convenire id vim. Est virtute epicurei ad.&lt;/p&gt;

&lt;h1 id=&quot;blockquote&quot;&gt;Blockquote&lt;/h1&gt;

&lt;p&gt;Cetero petentium in vim. Ea prodesset complectitur per. Dolor putant platonem eos ei, pertinacia conclusionemque quo ea, percipit consequuntur in vim. Et eos eius utroque consectetuer, in unum posidonium mea. Quod omnes consequuntur et vel, his vocent nominavi eu.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet.&lt;/p&gt;

&lt;h1 id=&quot;python-code&quot;&gt;Python Code&lt;/h1&gt;

&lt;p&gt;Nam an perpetua senserit temporibus. Sea velit iisque veritus ea. Pri ut assum partiendo. Eu iuvaret maiorum mea, atqui commune ad eam. Et est phaedrum forensibus, nec et elitr delenit feugait.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def foo():
    return &quot;foo&quot;

def main():
    foo()

if __name__ == '__main__':
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Est inani prodesset ex. Eu reque perfecto consulatu vix, omnes concludaturque eum an. Detraxit consequuntur per eu, virtute atomorum voluptatibus mei ei. Tamquam vituperatoribus et vis, quo in copiosae apeirian.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/blog/2015/08/28/book-style-doc.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/08/28/book-style-doc.html</guid>
        
        <category>english</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
